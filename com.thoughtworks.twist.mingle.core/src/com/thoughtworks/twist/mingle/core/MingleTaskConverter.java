/******************************************************************************* * Copyright (c) 2008 ThoughtWorks, Inc. and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html *  * Contributors: *     ThoughtWorks, Inc. - initial API and implementation *******************************************************************************/package com.thoughtworks.twist.mingle.core;import java.net.URL;import java.util.HashMap;import org.eclipse.mylyn.tasks.core.data.TaskAttribute;import org.eclipse.mylyn.tasks.core.data.TaskData;import com.thoughtworks.xstream.converters.Converter;import com.thoughtworks.xstream.converters.MarshallingContext;import com.thoughtworks.xstream.converters.UnmarshallingContext;import com.thoughtworks.xstream.io.HierarchicalStreamReader;import com.thoughtworks.xstream.io.HierarchicalStreamWriter;public class MingleTaskConverter implements Converter {	private static final String				DESCRIPTION	= "description";	private static final String				NAME		= "name";	private static final String				ID			= "number";	private final String					serverUrl;	private final MingleTaskAttributeMapper	taskAttributeMapper;	public MingleTaskConverter(URL serverUrl, MingleTaskAttributeMapper taskAttributeMapper) {		this.serverUrl = serverUrl.toString();		this.taskAttributeMapper = taskAttributeMapper;	}	public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {	}	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {		HashMap<String, Attribute> map = getProperties(reader);		TaskData taskData = new TaskData(taskAttributeMapper, MingleConstants.CONNECTOR_KIND, serverUrl, map.get(ID).value);		TaskAttribute root = taskData.getRoot();		TaskAttributePopulator taskAttributePopulator = new TaskAttributePopulator();		for (String key : map.keySet()) {			Attribute attribute = map.get(key);			if (key.startsWith("cp_")) {				root.createAttribute(key).setValue(attribute.value);			} else {				taskAttributePopulator.createAttribute(taskData, attribute);			}		}		return taskData;	}	private HashMap<String, Attribute> getProperties(HierarchicalStreamReader reader) {		HashMap<String, Attribute> map = new HashMap<String, Attribute>();		while (reader.hasMoreChildren()) {			reader.moveDown();			String nodeName = reader.getNodeName();			String value = reader.getValue();			reader.moveUp();			String type = reader.getAttribute("type");			if (type == null || type.trim().equals("")) {				type = "string";			}			Attribute attr = new Attribute(nodeName, value, type);			map.put(nodeName, attr);		}		return map;	}	public boolean canConvert(Class type) {		return type.equals(TaskData.class);	}}